"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
"""
import os
import logging
import asyncio
from datetime import datetime, timedelta
from typing import Optional
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from sqlalchemy import select
from aiogram import Bot
from aiogram.types import BufferedInputFile

from app.core.db import async_session_maker
from app.core.monitor import SystemMonitor
from app.core.charts import ChartGenerator
from app.models.metrics import UserSettings
from app.utils.helpers import get_env_int, get_env_float

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler: Optional[AsyncIOScheduler] = None
bot_instance: Optional[Bot] = None

# –ü–æ—Ä–æ–≥–∏ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
ALERT_CPU_THRESHOLD = get_env_float('ALERT_CPU_THRESHOLD', 90.0)
ALERT_RAM_THRESHOLD = get_env_float('ALERT_RAM_THRESHOLD', 90.0)
ALERT_DISK_THRESHOLD = get_env_float('ALERT_DISK_THRESHOLD', 90.0)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ (—á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å)
last_alerts = {
    'cpu': None,
    'ram': None,
    'disk': None,
}


async def collect_metrics_job():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫"""
    try:
        async with async_session_maker() as session:
            metric = await SystemMonitor.save_metrics(session)
            if metric:
                logger.debug(f"–ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±—Ä–∞–Ω—ã: CPU {metric.cpu_percent}%, RAM {metric.ram_percent}%")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
                await check_alerts(metric)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –º–µ—Ç—Ä–∏–∫: {e}")


async def check_alerts(metric):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
    global last_alerts
    
    if not bot_instance:
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á—ë–Ω–Ω—ã–º–∏ –∞–ª–µ—Ä—Ç–∞–º–∏
        async with async_session_maker() as session:
            stmt = select(UserSettings).where(UserSettings.alerts_enabled == True)
            result = await session.execute(stmt)
            users = result.scalars().all()
        
        current_time = datetime.utcnow()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CPU
        if metric.cpu_percent and metric.cpu_percent > ALERT_CPU_THRESHOLD:
            if not last_alerts['cpu'] or (current_time - last_alerts['cpu']).seconds > 300:  # 5 –º–∏–Ω—É—Ç
                for user in users:
                    try:
                        await bot_instance.send_message(
                            user.user_id,
                            f"‚ö†Ô∏è <b>–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ CPU!</b>\n\n"
                            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {metric.cpu_percent:.1f}%\n"
                            f"–ü–æ—Ä–æ–≥: {ALERT_CPU_THRESHOLD}%"
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")
                
                last_alerts['cpu'] = current_time
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º RAM
        if metric.ram_percent and metric.ram_percent > ALERT_RAM_THRESHOLD:
            if not last_alerts['ram'] or (current_time - last_alerts['ram']).seconds > 300:
                for user in users:
                    try:
                        await bot_instance.send_message(
                            user.user_id,
                            f"‚ö†Ô∏è <b>–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM!</b>\n\n"
                            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {metric.ram_percent:.1f}%\n"
                            f"–ü–æ—Ä–æ–≥: {ALERT_RAM_THRESHOLD}%"
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")
                
                last_alerts['ram'] = current_time
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Disk
        if metric.disk_percent and metric.disk_percent > ALERT_DISK_THRESHOLD:
            if not last_alerts['disk'] or (current_time - last_alerts['disk']).seconds > 300:
                for user in users:
                    try:
                        await bot_instance.send_message(
                            user.user_id,
                            f"‚ö†Ô∏è <b>–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ!</b>\n\n"
                            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {metric.disk_percent:.1f}%\n"
                            f"–ü–æ—Ä–æ–≥: {ALERT_DISK_THRESHOLD}%"
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")
                
                last_alerts['disk'] = current_time
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–ª–µ—Ä—Ç–æ–≤: {e}")


async def send_auto_reports_job():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–æ–≤"""
    if not bot_instance:
        return
    
    try:
        async with async_session_maker() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á—ë–Ω–Ω–æ–π –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–æ–π
            stmt = select(UserSettings).where(UserSettings.auto_report_enabled == True)
            result = await session.execute(stmt)
            users = result.scalars().all()
            
            current_time = datetime.utcnow()
            
            for user in users:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á—ë—Ç
                    should_send = False
                    
                    if user.last_report_time is None:
                        should_send = True
                    else:
                        time_since_last = (current_time - user.last_report_time).total_seconds() / 60
                        if time_since_last >= user.report_interval:
                            should_send = True
                    
                    if should_send:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç
                        await send_report_to_user(user.user_id)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                        user.last_report_time = current_time
                        await session.commit()
                        
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–æ—Ç—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}")
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ–æ—Ç—á—ë—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –∞–≤—Ç–æ–æ—Ç—á—ë—Ç–æ–≤: {e}")


async def send_report_to_user(user_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if not bot_instance:
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        cpu = SystemMonitor.get_cpu_metrics()
        memory = SystemMonitor.get_memory_metrics()
        disk = SystemMonitor.get_disk_metrics()
        
        status_text = "üìä <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç</b>\n\n"
        status_text += f"üñ• CPU: {cpu.get('cpu_percent', 0):.1f}%\n"
        status_text += f"üß† RAM: {memory.get('ram_percent', 0):.1f}%\n"
        status_text += f"üíæ Disk: {disk.get('disk_percent', 0):.1f}%\n"
        
        await bot_instance.send_message(user_id, status_text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        async with async_session_maker() as session:
            metrics = await SystemMonitor.get_metrics_for_period(session, hours=1)
        
        if metrics:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ CPU –≥—Ä–∞—Ñ–∏–∫
            chart_data = ChartGenerator.create_cpu_chart(metrics)
            if chart_data:
                chart_file = BufferedInputFile(chart_data, filename="cpu_report.png")
                await bot_instance.send_photo(
                    user_id,
                    photo=chart_file,
                    caption="üìà CPU –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å"
                )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞: {e}")


def init_scheduler(bot: Bot):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    global scheduler, bot_instance
    
    bot_instance = bot
    scheduler = AsyncIOScheduler()
    
    # –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ (–∏–∑ .env, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60 —Å–µ–∫—É–Ω–¥)
    monitor_interval = get_env_int('MONITOR_INTERVAL', 60)
    
    # –ó–∞–¥–∞—á–∞ –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
    scheduler.add_job(
        collect_metrics_job,
        trigger=IntervalTrigger(seconds=monitor_interval),
        id='collect_metrics',
        name='Collect system metrics',
        replace_existing=True,
    )
    
    # –ó–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ–æ—Ç—á—ë—Ç–æ–≤ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)
    scheduler.add_job(
        send_auto_reports_job,
        trigger=IntervalTrigger(minutes=1),
        id='auto_reports',
        name='Send auto reports',
        replace_existing=True,
    )
    
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")


def start_scheduler():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    if scheduler and not scheduler.running:
        scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")


def stop_scheduler():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    if scheduler and scheduler.running:
        scheduler.shutdown()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


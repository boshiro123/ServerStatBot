"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
"""
import logging
from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, FSInputFile, BufferedInputFile
from aiogram.fsm.context import FSMContext
from sqlalchemy import select

from app.core.db import async_session_maker
from app.core.monitor import SystemMonitor
from app.models.metrics import UserSettings
from app.utils.helpers import get_or_create_user_settings
from app.bot.keyboards.inline import get_period_keyboard, get_history_keyboard

logger = logging.getLogger(__name__)
router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    async with async_session_maker() as session:
        await get_or_create_user_settings(
            session,
            message.from_user.id,
            message.from_user.username
        )
    
    await message.answer(
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Server Monitor Bot!</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üìö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/status - –¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞\n"
        "/graph - –ì—Ä–∞—Ñ–∏–∫–∏ –º–µ—Ç—Ä–∏–∫ (–≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞)\n"
        "/history - –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥\n"
        "/top - –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ CPU –∏ RAM\n"
        "/setinterval [–º–∏–Ω—É—Ç—ã] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫—É\n"
        "/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫—É\n"
        "/settings - –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    )
    await message.answer(help_text)


@router.message(Command("status"))
async def cmd_status(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        cpu = SystemMonitor.get_cpu_metrics()
        memory = SystemMonitor.get_memory_metrics()
        disk = SystemMonitor.get_disk_metrics()
        network = SystemMonitor.get_network_metrics()
        uptime = SystemMonitor.get_uptime()
        processes = SystemMonitor.get_process_metrics()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_text = "üìä <b>–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞</b>\n\n"
        
        # CPU
        status_text += f"üñ• <b>CPU:</b>\n"
        status_text += f"  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {cpu.get('cpu_percent', 0):.1f}%\n"
        status_text += f"  ‚Ä¢ Load Avg: {cpu.get('cpu_load_1m', 0):.2f} / "
        status_text += f"{cpu.get('cpu_load_5m', 0):.2f} / {cpu.get('cpu_load_15m', 0):.2f}\n"
        
        if cpu.get('cpu_temp'):
            status_text += f"  ‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cpu.get('cpu_temp'):.1f}¬∞C\n"
        
        # RAM
        ram_used = memory.get('ram_used', 0)
        ram_total = memory.get('ram_total', 1)
        ram_percent = memory.get('ram_percent', 0)
        status_text += f"\nüß† <b>RAM:</b>\n"
        status_text += f"  ‚Ä¢ {SystemMonitor.format_bytes(ram_used)} / "
        status_text += f"{SystemMonitor.format_bytes(ram_total)} ({ram_percent:.1f}%)\n"
        
        # Disk
        disk_used = disk.get('disk_used', 0)
        disk_total = disk.get('disk_total', 1)
        disk_percent = disk.get('disk_percent', 0)
        status_text += f"\nüíæ <b>Disk:</b>\n"
        status_text += f"  ‚Ä¢ {SystemMonitor.format_bytes(disk_used)} / "
        status_text += f"{SystemMonitor.format_bytes(disk_total)} ({disk_percent:.1f}%)\n"
        
        # Network
        net_sent = network.get('net_sent', 0)
        net_recv = network.get('net_recv', 0)
        status_text += f"\nüåê <b>Network:</b>\n"
        status_text += f"  ‚Ä¢ ‚Üë –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {SystemMonitor.format_bytes(net_sent)}\n"
        status_text += f"  ‚Ä¢ ‚Üì –ü–æ–ª—É—á–µ–Ω–æ: {SystemMonitor.format_bytes(net_recv)}\n"
        
        # Uptime & Processes
        status_text += f"\n‚è± <b>Uptime:</b> {SystemMonitor.format_uptime(uptime)}\n"
        status_text += f"‚öôÔ∏è <b>–ü—Ä–æ—Ü–µ—Å—Å–æ–≤:</b> {processes.get('process_count', 0)}\n"
        
        await message.answer(status_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_status: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞")


@router.message(Command("graph"))
async def cmd_graph(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /graph"""
    await message.answer(
        "üìà <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤:</b>",
        reply_markup=get_period_keyboard()
    )


@router.message(Command("history"))
async def cmd_history(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history"""
    await message.answer(
        "üìú <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏:</b>",
        reply_markup=get_history_keyboard()
    )


@router.message(Command("top"))
async def cmd_top(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /top"""
    try:
        # –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ CPU
        top_cpu = SystemMonitor.get_top_processes(by='cpu', limit=5)
        # –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ RAM
        top_mem = SystemMonitor.get_top_processes(by='memory', limit=5)
        
        text = "üìä <b>–¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤</b>\n\n"
        
        text += "üî• <b>–ü–æ CPU:</b>\n"
        for i, proc in enumerate(top_cpu, 1):
            text += f"{i}. {proc.get('name', 'Unknown')[:20]} - "
            text += f"{proc.get('cpu_percent', 0):.1f}% (PID: {proc.get('pid')})\n"
        
        text += "\nüíæ <b>–ü–æ RAM:</b>\n"
        for i, proc in enumerate(top_mem, 1):
            text += f"{i}. {proc.get('name', 'Unknown')[:20]} - "
            text += f"{proc.get('memory_percent', 0):.1f}% (PID: {proc.get('pid')})\n"
        
        await message.answer(text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_top: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")


@router.message(Command("setinterval"))
async def cmd_setinterval(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setinterval"""
    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        args = message.text.split()
        if len(args) < 2:
            await message.answer(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö.\n"
                "–ü—Ä–∏–º–µ—Ä: /setinterval 60"
            )
            return
        
        try:
            interval = int(args[1])
            if interval < 1 or interval > 1440:  # –º–∞–∫—Å 24 —á–∞—Å–∞
                await message.answer("‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 1440 –º–∏–Ω—É—Ç")
                return
        except ValueError:
            await message.answer("‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        async with async_session_maker() as session:
            user_settings = await get_or_create_user_settings(
                session,
                message.from_user.id,
                message.from_user.username
            )
            user_settings.auto_report_enabled = True
            user_settings.report_interval = interval
            await session.commit()
        
        await message.answer(
            f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–æ–≤ –≤–∫–ª—é—á–µ–Ω–∞.\n"
            f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval} –º–∏–Ω—É—Ç"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_setinterval: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞")


@router.message(Command("stop"))
async def cmd_stop(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop"""
    try:
        async with async_session_maker() as session:
            user_settings = await get_or_create_user_settings(
                session,
                message.from_user.id,
                message.from_user.username
            )
            user_settings.auto_report_enabled = False
            await session.commit()
        
        await message.answer("‚è∏ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_stop: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∏")


@router.message(Command("settings"))
async def cmd_settings(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
    try:
        async with async_session_maker() as session:
            user_settings = await get_or_create_user_settings(
                session,
                message.from_user.id,
                message.from_user.username
            )
            
            text = "‚öôÔ∏è <b>–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n"
            text += f"üë§ User ID: {user_settings.user_id}\n"
            
            if user_settings.auto_report_enabled:
                text += f"üìä –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞: ‚úÖ –≤–∫–ª—é—á–µ–Ω–∞\n"
                text += f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª: {user_settings.report_interval} –º–∏–Ω—É—Ç\n"
            else:
                text += f"üìä –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞: ‚ùå –æ—Ç–∫–ª—é—á–µ–Ω–∞\n"
            
            text += f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'‚úÖ' if user_settings.alerts_enabled else '‚ùå'}\n"
            
            await message.answer(text)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_settings: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")


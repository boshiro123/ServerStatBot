"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
"""
import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, BufferedInputFile
from datetime import datetime, timedelta

from app.core.db import async_session_maker
from app.core.monitor import SystemMonitor
from app.core.charts import ChartGenerator

logger = logging.getLogger(__name__)
router = Router()


@router.callback_query(F.data.startswith("graph_"))
async def callback_graph(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥ –∏–∑ callback_data
        hours = int(callback.data.split("_")[1])
        
        await callback.answer()
        await callback.message.edit_text(
            f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫–∏ –∑–∞ {hours}—á... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –ë–î
        async with async_session_maker() as session:
            metrics = await SystemMonitor.get_metrics_for_period(session, hours=hours)
        
        if not metrics:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.\n"
                "–ú–µ—Ç—Ä–∏–∫–∏ –µ—â—ë –Ω–µ –Ω–∞–∫–æ–ø–ª–µ–Ω—ã –∏–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞."
            )
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        charts = ChartGenerator.create_all_charts(metrics)
        
        period_text = f"{hours}—á" if hours < 24 else f"{hours // 24}–¥"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        for chart_name, chart_data in charts.items():
            if chart_data:
                chart_file = BufferedInputFile(
                    chart_data,
                    filename=f"{chart_name}_{period_text}.png"
                )
                
                caption_map = {
                    'cpu': f"üñ• CPU –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ {period_text}",
                    'memory': f"üß† RAM –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ {period_text}",
                    'disk': f"üíæ Disk –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ {period_text}",
                    'network': f"üåê Network –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ {period_text}",
                }
                
                await callback.message.answer_photo(
                    photo=chart_file,
                    caption=caption_map.get(chart_name, f"–ì—Ä–∞—Ñ–∏–∫ –∑–∞ {period_text}")
                )
        
        await callback.message.edit_text(
            f"‚úÖ –ì—Ä–∞—Ñ–∏–∫–∏ –∑–∞ {period_text} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback_graph: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤"
        )


@router.callback_query(F.data.startswith("history_"))
async def callback_history(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥ –∏–∑ callback_data
        hours = int(callback.data.split("_")[1])
        
        await callback.answer()
        await callback.message.edit_text(
            f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∏—Å—Ç–æ—Ä–∏—é –∑–∞ {hours}—á..."
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –ë–î
        async with async_session_maker() as session:
            metrics = await SystemMonitor.get_metrics_for_period(session, hours=hours)
        
        if not metrics:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."
            )
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
        cpu_values = [m.cpu_percent for m in metrics if m.cpu_percent is not None]
        ram_values = [m.ram_percent for m in metrics if m.ram_percent is not None]
        disk_values = [m.disk_percent for m in metrics if m.disk_percent is not None]
        
        period_text = f"{hours}—á" if hours < 24 else f"{hours // 24}–¥"
        
        text = f"üìä <b>–ò—Å—Ç–æ—Ä–∏—è –º–µ—Ç—Ä–∏–∫ –∑–∞ {period_text}</b>\n\n"
        text += f"üìÖ –ü–µ—Ä–∏–æ–¥: {metrics[0].timestamp.strftime('%d.%m %H:%M')} - "
        text += f"{metrics[-1].timestamp.strftime('%d.%m %H:%M')}\n"
        text += f"üìà –ó–∞–ø–∏—Å–µ–π: {len(metrics)}\n\n"
        
        # CPU —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if cpu_values:
            text += "üñ• <b>CPU:</b>\n"
            text += f"  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: {sum(cpu_values)/len(cpu_values):.1f}%\n"
            text += f"  ‚Ä¢ –ú–∏–Ω–∏–º—É–º: {min(cpu_values):.1f}%\n"
            text += f"  ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: {max(cpu_values):.1f}%\n"
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞
            high_cpu = sum(1 for v in cpu_values if v > 80)
            if high_cpu:
                text += f"  ‚Ä¢ ‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (>80%): {high_cpu} —Ä–∞–∑\n"
        
        # RAM —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if ram_values:
            text += "\nüß† <b>RAM:</b>\n"
            text += f"  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: {sum(ram_values)/len(ram_values):.1f}%\n"
            text += f"  ‚Ä¢ –ú–∏–Ω–∏–º—É–º: {min(ram_values):.1f}%\n"
            text += f"  ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: {max(ram_values):.1f}%\n"
            
            high_ram = sum(1 for v in ram_values if v > 80)
            if high_ram:
                text += f"  ‚Ä¢ ‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (>80%): {high_ram} —Ä–∞–∑\n"
        
        # Disk —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if disk_values:
            text += "\nüíæ <b>Disk:</b>\n"
            text += f"  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: {sum(disk_values)/len(disk_values):.1f}%\n"
            text += f"  ‚Ä¢ –ú–∏–Ω–∏–º—É–º: {min(disk_values):.1f}%\n"
            text += f"  ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: {max(disk_values):.1f}%\n"
        
        # Network —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if len(metrics) > 1:
            first_sent = metrics[0].net_sent or 0
            last_sent = metrics[-1].net_sent or 0
            first_recv = metrics[0].net_recv or 0
            last_recv = metrics[-1].net_recv or 0
            
            total_sent = last_sent - first_sent
            total_recv = last_recv - first_recv
            
            text += "\nüåê <b>Network (–∑–∞ –ø–µ—Ä–∏–æ–¥):</b>\n"
            text += f"  ‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {SystemMonitor.format_bytes(total_sent)}\n"
            text += f"  ‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ: {SystemMonitor.format_bytes(total_recv)}\n"
        
        await callback.message.edit_text(text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback_history: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏"
        )

